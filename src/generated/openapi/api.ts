/* tslint:disable */
/* eslint-disable */
/**
 * RAWG Video Games Database API
 *  The largest open video games database.  ### Why build on RAWG - More than 350,000 games for 50 platforms including mobiles. - Rich metadata: tags, genres, developers, publishers, individual creators, official websites, release dates, Metacritic ratings. - Where to buy: links to digital distribution services - Similar games based on visual similarity. - Player activity data: Steam average playtime and RAWG player counts and ratings. - Actively developing and constantly getting better by user contribution and our algorithms.  ### Terms of Use - Free for personal use as long as you attribute RAWG as the source of the data and/or images and add an active hyperlink from every page where the data of RAWG is used. - Free for commercial use for startups and hobby projects with not more than 100,000 monthly active users or 500,000 page views per month. If your project is larger than that, email us at [api@rawg.io](mailto:api@rawg.io) for commercial terms. - No cloning. It would not be cool if you used our API to launch a clone of RAWG. We know it is not always easy to say what is a duplicate and what isn\'t. Drop us a line at [api@rawg.io](mailto:api@rawg.io) if you are in doubt, and we will talk it through. - You must include an API key with every request. The key can be obtained at https://rawg.io/apidocs. If you don’t provide it, we may ban your requests.  __[Read more](https://rawg.io/apidocs)__. 
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreatorRolesList200Response
 */
export interface CreatorRolesList200Response {
    /**
     * 
     * @type {number}
     * @memberof CreatorRolesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CreatorRolesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatorRolesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Position>}
     * @memberof CreatorRolesList200Response
     */
    'results': Array<Position>;
}
/**
 * 
 * @export
 * @interface CreatorsList200Response
 */
export interface CreatorsList200Response {
    /**
     * 
     * @type {number}
     * @memberof CreatorsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof CreatorsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreatorsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Person>}
     * @memberof CreatorsList200Response
     */
    'results': Array<Person>;
}
/**
 * 
 * @export
 * @interface Developer
 */
export interface Developer {
    /**
     * 
     * @type {number}
     * @memberof Developer
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Developer
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Developer
     */
    'slug'?: string;
    /**
     * 
     * @type {number}
     * @memberof Developer
     */
    'games_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof Developer
     */
    'image_background'?: string;
}
/**
 * 
 * @export
 * @interface DeveloperSingle
 */
export interface DeveloperSingle {
    /**
     * 
     * @type {number}
     * @memberof DeveloperSingle
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DeveloperSingle
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DeveloperSingle
     */
    'slug'?: string;
    /**
     * 
     * @type {number}
     * @memberof DeveloperSingle
     */
    'games_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof DeveloperSingle
     */
    'image_background'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeveloperSingle
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface DevelopersList200Response
 */
export interface DevelopersList200Response {
    /**
     * 
     * @type {number}
     * @memberof DevelopersList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof DevelopersList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DevelopersList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Developer>}
     * @memberof DevelopersList200Response
     */
    'results': Array<Developer>;
}
/**
 * 
 * @export
 * @interface Game
 */
export interface Game {
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    'released'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Game
     */
    'tba'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    'background_image'?: string;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    'rating': number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    'rating_top'?: number;
    /**
     * 
     * @type {object}
     * @memberof Game
     */
    'ratings'?: object;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    'ratings_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    'reviews_text_count'?: string;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    'added'?: number;
    /**
     * 
     * @type {object}
     * @memberof Game
     */
    'added_by_status'?: object;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    'metacritic'?: number;
    /**
     * in hours
     * @type {number}
     * @memberof Game
     */
    'playtime'?: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    'suggestions_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    'updated'?: string;
    /**
     * 
     * @type {GameEsrbRating}
     * @memberof Game
     */
    'esrb_rating'?: GameEsrbRating | null;
    /**
     * 
     * @type {Array<GamePlatformsInner>}
     * @memberof Game
     */
    'platforms'?: Array<GamePlatformsInner>;
}
/**
 * 
 * @export
 * @interface GameEsrbRating
 */
export interface GameEsrbRating {
    /**
     * 
     * @type {number}
     * @memberof GameEsrbRating
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GameEsrbRating
     */
    'slug'?: GameEsrbRatingSlugEnum;
    /**
     * 
     * @type {string}
     * @memberof GameEsrbRating
     */
    'name'?: GameEsrbRatingNameEnum;
}

export const GameEsrbRatingSlugEnum = {
    Everyone: 'everyone',
    Everyone10Plus: 'everyone-10-plus',
    Teen: 'teen',
    Mature: 'mature',
    AdultsOnly: 'adults-only',
    RatingPending: 'rating-pending'
} as const;

export type GameEsrbRatingSlugEnum = typeof GameEsrbRatingSlugEnum[keyof typeof GameEsrbRatingSlugEnum];
export const GameEsrbRatingNameEnum = {
    Everyone: 'Everyone',
    Everyone10: 'Everyone 10+',
    Teen: 'Teen',
    Mature: 'Mature',
    AdultsOnly: 'Adults Only',
    RatingPending: 'Rating Pending'
} as const;

export type GameEsrbRatingNameEnum = typeof GameEsrbRatingNameEnum[keyof typeof GameEsrbRatingNameEnum];

/**
 * 
 * @export
 * @interface GamePersonList
 */
export interface GamePersonList {
    /**
     * 
     * @type {number}
     * @memberof GamePersonList
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GamePersonList
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GamePersonList
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof GamePersonList
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof GamePersonList
     */
    'image_background'?: string;
    /**
     * 
     * @type {number}
     * @memberof GamePersonList
     */
    'games_count'?: number;
}
/**
 * 
 * @export
 * @interface GamePlatformMetacritic
 */
export interface GamePlatformMetacritic {
    /**
     * 
     * @type {number}
     * @memberof GamePlatformMetacritic
     */
    'metascore'?: number;
    /**
     * 
     * @type {string}
     * @memberof GamePlatformMetacritic
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface GamePlatformsInner
 */
export interface GamePlatformsInner {
    /**
     * 
     * @type {GamePlatformsInnerPlatform}
     * @memberof GamePlatformsInner
     */
    'platform'?: GamePlatformsInnerPlatform;
    /**
     * 
     * @type {string}
     * @memberof GamePlatformsInner
     */
    'released_at'?: string | null;
    /**
     * 
     * @type {GamePlatformsInnerRequirements}
     * @memberof GamePlatformsInner
     */
    'requirements'?: GamePlatformsInnerRequirements | null;
}
/**
 * 
 * @export
 * @interface GamePlatformsInnerPlatform
 */
export interface GamePlatformsInnerPlatform {
    /**
     * 
     * @type {number}
     * @memberof GamePlatformsInnerPlatform
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GamePlatformsInnerPlatform
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof GamePlatformsInnerPlatform
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface GamePlatformsInnerRequirements
 */
export interface GamePlatformsInnerRequirements {
    /**
     * 
     * @type {string}
     * @memberof GamePlatformsInnerRequirements
     */
    'minimum'?: string;
    /**
     * 
     * @type {string}
     * @memberof GamePlatformsInnerRequirements
     */
    'recommended'?: string;
}
/**
 * 
 * @export
 * @interface GameSingle
 */
export interface GameSingle {
    /**
     * 
     * @type {number}
     * @memberof GameSingle
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GameSingle
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof GameSingle
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GameSingle
     */
    'name_original'?: string;
    /**
     * 
     * @type {string}
     * @memberof GameSingle
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof GameSingle
     */
    'metacritic'?: number;
    /**
     * 
     * @type {Array<GamePlatformMetacritic>}
     * @memberof GameSingle
     */
    'metacritic_platforms'?: Array<GamePlatformMetacritic>;
    /**
     * 
     * @type {string}
     * @memberof GameSingle
     */
    'released'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GameSingle
     */
    'tba'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GameSingle
     */
    'updated'?: string;
    /**
     * 
     * @type {string}
     * @memberof GameSingle
     */
    'background_image'?: string;
    /**
     * 
     * @type {string}
     * @memberof GameSingle
     */
    'background_image_additional'?: string;
    /**
     * 
     * @type {string}
     * @memberof GameSingle
     */
    'website'?: string;
    /**
     * 
     * @type {number}
     * @memberof GameSingle
     */
    'rating': number;
    /**
     * 
     * @type {number}
     * @memberof GameSingle
     */
    'rating_top'?: number;
    /**
     * 
     * @type {object}
     * @memberof GameSingle
     */
    'ratings'?: object;
    /**
     * 
     * @type {object}
     * @memberof GameSingle
     */
    'reactions'?: object;
    /**
     * 
     * @type {number}
     * @memberof GameSingle
     */
    'added'?: number;
    /**
     * 
     * @type {object}
     * @memberof GameSingle
     */
    'added_by_status'?: object;
    /**
     * in hours
     * @type {number}
     * @memberof GameSingle
     */
    'playtime'?: number;
    /**
     * 
     * @type {number}
     * @memberof GameSingle
     */
    'screenshots_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof GameSingle
     */
    'movies_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof GameSingle
     */
    'creators_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof GameSingle
     */
    'achievements_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof GameSingle
     */
    'parent_achievements_count'?: string;
    /**
     * For example \"https://www.reddit.com/r/uncharted/\" or \"uncharted\"
     * @type {string}
     * @memberof GameSingle
     */
    'reddit_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof GameSingle
     */
    'reddit_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GameSingle
     */
    'reddit_description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GameSingle
     */
    'reddit_logo'?: string;
    /**
     * 
     * @type {number}
     * @memberof GameSingle
     */
    'reddit_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof GameSingle
     */
    'twitch_count'?: string;
    /**
     * 
     * @type {string}
     * @memberof GameSingle
     */
    'youtube_count'?: string;
    /**
     * 
     * @type {string}
     * @memberof GameSingle
     */
    'reviews_text_count'?: string;
    /**
     * 
     * @type {number}
     * @memberof GameSingle
     */
    'ratings_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof GameSingle
     */
    'suggestions_count'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof GameSingle
     */
    'alternative_names'?: Array<string>;
    /**
     * For example \"http://www.metacritic.com/game/playstation-4/the-witcher-3-wild-hunt\"
     * @type {string}
     * @memberof GameSingle
     */
    'metacritic_url'?: string;
    /**
     * 
     * @type {number}
     * @memberof GameSingle
     */
    'parents_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof GameSingle
     */
    'additions_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof GameSingle
     */
    'game_series_count'?: number;
    /**
     * 
     * @type {GameEsrbRating}
     * @memberof GameSingle
     */
    'esrb_rating'?: GameEsrbRating | null;
    /**
     * 
     * @type {Array<GamePlatformsInner>}
     * @memberof GameSingle
     */
    'platforms'?: Array<GamePlatformsInner>;
}
/**
 * 
 * @export
 * @interface GameStoreFull
 */
export interface GameStoreFull {
    /**
     * 
     * @type {number}
     * @memberof GameStoreFull
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GameStoreFull
     */
    'game_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GameStoreFull
     */
    'store_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GameStoreFull
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface GamesDevelopmentTeamList200Response
 */
export interface GamesDevelopmentTeamList200Response {
    /**
     * 
     * @type {number}
     * @memberof GamesDevelopmentTeamList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof GamesDevelopmentTeamList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GamesDevelopmentTeamList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<GamePersonList>}
     * @memberof GamesDevelopmentTeamList200Response
     */
    'results': Array<GamePersonList>;
}
/**
 * 
 * @export
 * @interface GamesList200Response
 */
export interface GamesList200Response {
    /**
     * 
     * @type {number}
     * @memberof GamesList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof GamesList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GamesList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Game>}
     * @memberof GamesList200Response
     */
    'results': Array<Game>;
}
/**
 * 
 * @export
 * @interface GamesScreenshotsList200Response
 */
export interface GamesScreenshotsList200Response {
    /**
     * 
     * @type {number}
     * @memberof GamesScreenshotsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof GamesScreenshotsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GamesScreenshotsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ScreenShot>}
     * @memberof GamesScreenshotsList200Response
     */
    'results': Array<ScreenShot>;
}
/**
 * 
 * @export
 * @interface GamesStoresList200Response
 */
export interface GamesStoresList200Response {
    /**
     * 
     * @type {number}
     * @memberof GamesStoresList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof GamesStoresList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GamesStoresList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<GameStoreFull>}
     * @memberof GamesStoresList200Response
     */
    'results': Array<GameStoreFull>;
}
/**
 * 
 * @export
 * @interface Genre
 */
export interface Genre {
    /**
     * 
     * @type {number}
     * @memberof Genre
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Genre
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Genre
     */
    'slug'?: string;
    /**
     * 
     * @type {number}
     * @memberof Genre
     */
    'games_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof Genre
     */
    'image_background'?: string;
}
/**
 * 
 * @export
 * @interface GenreSingle
 */
export interface GenreSingle {
    /**
     * 
     * @type {number}
     * @memberof GenreSingle
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GenreSingle
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GenreSingle
     */
    'slug'?: string;
    /**
     * 
     * @type {number}
     * @memberof GenreSingle
     */
    'games_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof GenreSingle
     */
    'image_background'?: string;
    /**
     * 
     * @type {string}
     * @memberof GenreSingle
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface GenresList200Response
 */
export interface GenresList200Response {
    /**
     * 
     * @type {number}
     * @memberof GenresList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof GenresList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GenresList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Genre>}
     * @memberof GenresList200Response
     */
    'results': Array<Genre>;
}
/**
 * 
 * @export
 * @interface Movie
 */
export interface Movie {
    /**
     * 
     * @type {number}
     * @memberof Movie
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Movie
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Movie
     */
    'preview'?: string;
    /**
     * 
     * @type {object}
     * @memberof Movie
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface ParentAchievement
 */
export interface ParentAchievement {
    /**
     * 
     * @type {number}
     * @memberof ParentAchievement
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ParentAchievement
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ParentAchievement
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ParentAchievement
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof ParentAchievement
     */
    'percent'?: string;
}
/**
 * 
 * @export
 * @interface Person
 */
export interface Person {
    /**
     * 
     * @type {number}
     * @memberof Person
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof Person
     */
    'image_background'?: string;
    /**
     * 
     * @type {number}
     * @memberof Person
     */
    'games_count'?: number;
}
/**
 * 
 * @export
 * @interface PersonSingle
 */
export interface PersonSingle {
    /**
     * 
     * @type {number}
     * @memberof PersonSingle
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PersonSingle
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PersonSingle
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonSingle
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonSingle
     */
    'image_background'?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonSingle
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof PersonSingle
     */
    'games_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof PersonSingle
     */
    'reviews_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PersonSingle
     */
    'rating'?: string;
    /**
     * 
     * @type {number}
     * @memberof PersonSingle
     */
    'rating_top'?: number;
    /**
     * 
     * @type {string}
     * @memberof PersonSingle
     */
    'updated'?: string;
}
/**
 * 
 * @export
 * @interface Platform
 */
export interface Platform {
    /**
     * 
     * @type {number}
     * @memberof Platform
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Platform
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Platform
     */
    'slug'?: string;
    /**
     * 
     * @type {number}
     * @memberof Platform
     */
    'games_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof Platform
     */
    'image_background'?: string;
    /**
     * 
     * @type {string}
     * @memberof Platform
     */
    'image'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Platform
     */
    'year_start'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Platform
     */
    'year_end'?: number | null;
}
/**
 * 
 * @export
 * @interface PlatformParentSingle
 */
export interface PlatformParentSingle {
    /**
     * 
     * @type {number}
     * @memberof PlatformParentSingle
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PlatformParentSingle
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PlatformParentSingle
     */
    'slug'?: string;
    /**
     * 
     * @type {Array<Platform>}
     * @memberof PlatformParentSingle
     */
    'platforms': Array<Platform>;
}
/**
 * 
 * @export
 * @interface PlatformSingle
 */
export interface PlatformSingle {
    /**
     * 
     * @type {number}
     * @memberof PlatformSingle
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PlatformSingle
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PlatformSingle
     */
    'slug'?: string;
    /**
     * 
     * @type {number}
     * @memberof PlatformSingle
     */
    'games_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PlatformSingle
     */
    'image_background'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformSingle
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlatformSingle
     */
    'image'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PlatformSingle
     */
    'year_start'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PlatformSingle
     */
    'year_end'?: number | null;
}
/**
 * 
 * @export
 * @interface PlatformsList200Response
 */
export interface PlatformsList200Response {
    /**
     * 
     * @type {number}
     * @memberof PlatformsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PlatformsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlatformsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Platform>}
     * @memberof PlatformsList200Response
     */
    'results': Array<Platform>;
}
/**
 * 
 * @export
 * @interface PlatformsListsParentsList200Response
 */
export interface PlatformsListsParentsList200Response {
    /**
     * 
     * @type {number}
     * @memberof PlatformsListsParentsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PlatformsListsParentsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PlatformsListsParentsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<PlatformParentSingle>}
     * @memberof PlatformsListsParentsList200Response
     */
    'results': Array<PlatformParentSingle>;
}
/**
 * 
 * @export
 * @interface Position
 */
export interface Position {
    /**
     * 
     * @type {number}
     * @memberof Position
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Position
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Position
     */
    'slug'?: string;
}
/**
 * 
 * @export
 * @interface Publisher
 */
export interface Publisher {
    /**
     * 
     * @type {number}
     * @memberof Publisher
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Publisher
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Publisher
     */
    'slug'?: string;
    /**
     * 
     * @type {number}
     * @memberof Publisher
     */
    'games_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof Publisher
     */
    'image_background'?: string;
}
/**
 * 
 * @export
 * @interface PublisherSingle
 */
export interface PublisherSingle {
    /**
     * 
     * @type {number}
     * @memberof PublisherSingle
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof PublisherSingle
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PublisherSingle
     */
    'slug'?: string;
    /**
     * 
     * @type {number}
     * @memberof PublisherSingle
     */
    'games_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PublisherSingle
     */
    'image_background'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublisherSingle
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface PublishersList200Response
 */
export interface PublishersList200Response {
    /**
     * 
     * @type {number}
     * @memberof PublishersList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PublishersList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PublishersList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Publisher>}
     * @memberof PublishersList200Response
     */
    'results': Array<Publisher>;
}
/**
 * 
 * @export
 * @interface Reddit
 */
export interface Reddit {
    /**
     * 
     * @type {number}
     * @memberof Reddit
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Reddit
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Reddit
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof Reddit
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof Reddit
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Reddit
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof Reddit
     */
    'username_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Reddit
     */
    'created'?: string;
}
/**
 * 
 * @export
 * @interface ScreenShot
 */
export interface ScreenShot {
    /**
     * 
     * @type {number}
     * @memberof ScreenShot
     */
    'id'?: number;
    /**
     * An image file with size up to 20 MB.
     * @type {string}
     * @memberof ScreenShot
     */
    'image'?: string;
    /**
     * Set image as hidden or visible.
     * @type {boolean}
     * @memberof ScreenShot
     */
    'hidden'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ScreenShot
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof ScreenShot
     */
    'height'?: number;
}
/**
 * 
 * @export
 * @interface Store
 */
export interface Store {
    /**
     * 
     * @type {number}
     * @memberof Store
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Store
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Store
     */
    'domain'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Store
     */
    'slug'?: string;
    /**
     * 
     * @type {number}
     * @memberof Store
     */
    'games_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof Store
     */
    'image_background'?: string;
}
/**
 * 
 * @export
 * @interface StoreSingle
 */
export interface StoreSingle {
    /**
     * 
     * @type {number}
     * @memberof StoreSingle
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof StoreSingle
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof StoreSingle
     */
    'domain'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StoreSingle
     */
    'slug'?: string;
    /**
     * 
     * @type {number}
     * @memberof StoreSingle
     */
    'games_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof StoreSingle
     */
    'image_background'?: string;
    /**
     * 
     * @type {string}
     * @memberof StoreSingle
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface StoresList200Response
 */
export interface StoresList200Response {
    /**
     * 
     * @type {number}
     * @memberof StoresList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof StoresList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StoresList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Store>}
     * @memberof StoresList200Response
     */
    'results': Array<Store>;
}
/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * 
     * @type {number}
     * @memberof Tag
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'slug'?: string;
    /**
     * 
     * @type {number}
     * @memberof Tag
     */
    'games_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'image_background'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'language'?: string;
}
/**
 * 
 * @export
 * @interface TagSingle
 */
export interface TagSingle {
    /**
     * 
     * @type {number}
     * @memberof TagSingle
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TagSingle
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TagSingle
     */
    'slug'?: string;
    /**
     * 
     * @type {number}
     * @memberof TagSingle
     */
    'games_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof TagSingle
     */
    'image_background'?: string;
    /**
     * 
     * @type {string}
     * @memberof TagSingle
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface TagsList200Response
 */
export interface TagsList200Response {
    /**
     * 
     * @type {number}
     * @memberof TagsList200Response
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof TagsList200Response
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TagsList200Response
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof TagsList200Response
     */
    'results': Array<Tag>;
}
/**
 * 
 * @export
 * @interface Twitch
 */
export interface Twitch {
    /**
     * 
     * @type {number}
     * @memberof Twitch
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Twitch
     */
    'external_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Twitch
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Twitch
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Twitch
     */
    'created'?: string;
    /**
     * 
     * @type {string}
     * @memberof Twitch
     */
    'published'?: string;
    /**
     * 
     * @type {string}
     * @memberof Twitch
     */
    'thumbnail'?: string;
    /**
     * 
     * @type {number}
     * @memberof Twitch
     */
    'view_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof Twitch
     */
    'language'?: string;
}
/**
 * 
 * @export
 * @interface Youtube
 */
export interface Youtube {
    /**
     * 
     * @type {number}
     * @memberof Youtube
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Youtube
     */
    'external_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Youtube
     */
    'channel_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Youtube
     */
    'channel_title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Youtube
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Youtube
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Youtube
     */
    'created'?: string;
    /**
     * 
     * @type {number}
     * @memberof Youtube
     */
    'view_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof Youtube
     */
    'comments_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof Youtube
     */
    'like_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof Youtube
     */
    'dislike_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof Youtube
     */
    'favorite_count'?: number;
    /**
     * 
     * @type {object}
     * @memberof Youtube
     */
    'thumbnails'?: object;
}

/**
 * CreatorRolesApi - axios parameter creator
 * @export
 */
export const CreatorRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a list of creator positions (jobs).
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creatorRolesList: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/creator-roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreatorRolesApi - functional programming interface
 * @export
 */
export const CreatorRolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreatorRolesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a list of creator positions (jobs).
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creatorRolesList(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatorRolesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creatorRolesList(page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreatorRolesApi - factory interface
 * @export
 */
export const CreatorRolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreatorRolesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a list of creator positions (jobs).
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creatorRolesList(page?: number, pageSize?: number, options?: any): AxiosPromise<CreatorRolesList200Response> {
            return localVarFp.creatorRolesList(page, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreatorRolesApi - object-oriented interface
 * @export
 * @class CreatorRolesApi
 * @extends {BaseAPI}
 */
export class CreatorRolesApi extends BaseAPI {
    /**
     * 
     * @summary Get a list of creator positions (jobs).
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreatorRolesApi
     */
    public creatorRolesList(page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return CreatorRolesApiFp(this.configuration).creatorRolesList(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CreatorsApi - axios parameter creator
 * @export
 */
export const CreatorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a list of game creators.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creatorsList: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/creators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get details of the creator.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creatorsRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('creatorsRead', 'id', id)
            const localVarPath = `/creators/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreatorsApi - functional programming interface
 * @export
 */
export const CreatorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreatorsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a list of game creators.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creatorsList(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatorsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creatorsList(page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get details of the creator.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async creatorsRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.creatorsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreatorsApi - factory interface
 * @export
 */
export const CreatorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreatorsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a list of game creators.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creatorsList(page?: number, pageSize?: number, options?: any): AxiosPromise<CreatorsList200Response> {
            return localVarFp.creatorsList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get details of the creator.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        creatorsRead(id: string, options?: any): AxiosPromise<PersonSingle> {
            return localVarFp.creatorsRead(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreatorsApi - object-oriented interface
 * @export
 * @class CreatorsApi
 * @extends {BaseAPI}
 */
export class CreatorsApi extends BaseAPI {
    /**
     * 
     * @summary Get a list of game creators.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreatorsApi
     */
    public creatorsList(page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return CreatorsApiFp(this.configuration).creatorsList(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get details of the creator.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreatorsApi
     */
    public creatorsRead(id: string, options?: AxiosRequestConfig) {
        return CreatorsApiFp(this.configuration).creatorsRead(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DevelopersApi - axios parameter creator
 * @export
 */
export const DevelopersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a list of game developers.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        developersList: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/developers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get details of the developer.
         * @param {number} id A unique integer value identifying this Developer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        developersRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('developersRead', 'id', id)
            const localVarPath = `/developers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevelopersApi - functional programming interface
 * @export
 */
export const DevelopersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DevelopersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a list of game developers.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async developersList(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DevelopersList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.developersList(page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get details of the developer.
         * @param {number} id A unique integer value identifying this Developer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async developersRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeveloperSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.developersRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DevelopersApi - factory interface
 * @export
 */
export const DevelopersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DevelopersApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a list of game developers.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        developersList(page?: number, pageSize?: number, options?: any): AxiosPromise<DevelopersList200Response> {
            return localVarFp.developersList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get details of the developer.
         * @param {number} id A unique integer value identifying this Developer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        developersRead(id: number, options?: any): AxiosPromise<DeveloperSingle> {
            return localVarFp.developersRead(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DevelopersApi - object-oriented interface
 * @export
 * @class DevelopersApi
 * @extends {BaseAPI}
 */
export class DevelopersApi extends BaseAPI {
    /**
     * 
     * @summary Get a list of game developers.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopersApi
     */
    public developersList(page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return DevelopersApiFp(this.configuration).developersList(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get details of the developer.
     * @param {number} id A unique integer value identifying this Developer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopersApi
     */
    public developersRead(id: number, options?: AxiosRequestConfig) {
        return DevelopersApiFp(this.configuration).developersRead(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GamesApi - axios parameter creator
 * @export
 */
export const GamesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a list of game achievements.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesAchievementsRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gamesAchievementsRead', 'id', id)
            const localVarPath = `/games/{id}/achievements`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of DLC\'s for the game, GOTY and other editions, companion apps, etc.
         * @param {string} gamePk 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesAdditionsList: async (gamePk: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gamePk' is not null or undefined
            assertParamExists('gamesAdditionsList', 'gamePk', gamePk)
            const localVarPath = `/games/{game_pk}/additions`
                .replace(`{${"game_pk"}}`, encodeURIComponent(String(gamePk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of individual creators that were part of the development team.
         * @param {string} gamePk 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesDevelopmentTeamList: async (gamePk: string, ordering?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gamePk' is not null or undefined
            assertParamExists('gamesDevelopmentTeamList', 'gamePk', gamePk)
            const localVarPath = `/games/{game_pk}/development-team`
                .replace(`{${"game_pk"}}`, encodeURIComponent(String(gamePk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of games that are part of the same series.
         * @param {string} gamePk 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesGameSeriesList: async (gamePk: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gamePk' is not null or undefined
            assertParamExists('gamesGameSeriesList', 'gamePk', gamePk)
            const localVarPath = `/games/{game_pk}/game-series`
                .replace(`{${"game_pk"}}`, encodeURIComponent(String(gamePk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of games.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] Search query.
         * @param {boolean} [searchPrecise] Disable fuzziness for the search query.
         * @param {boolean} [searchExact] Mark the search query as exact.
         * @param {string} [parentPlatforms] Filter by parent platforms, for example: &#x60;1,2,3&#x60;.
         * @param {string} [platforms] Filter by platforms, for example: &#x60;4,5&#x60;.
         * @param {string} [stores] Filter by stores, for example: &#x60;5,6&#x60;.
         * @param {string} [developers] Filter by developers, for example: &#x60;1612,18893&#x60; or &#x60;valve-software,feral-interactive&#x60;.
         * @param {string} [publishers] Filter by publishers, for example: &#x60;354,20987&#x60; or &#x60;electronic-arts,microsoft-studios&#x60;.
         * @param {string} [genres] Filter by genres, for example: &#x60;4,51&#x60; or &#x60;action,indie&#x60;.
         * @param {string} [tags] Filter by tags, for example: &#x60;31,7&#x60; or &#x60;singleplayer,multiplayer&#x60;.
         * @param {string} [creators] Filter by creators, for example: &#x60;78,28&#x60; or &#x60;cris-velasco,mike-morasky&#x60;.
         * @param {string} [dates] Filter by a release date, for example: &#x60;2010-01-01,2018-12-31.1960-01-01,1969-12-31&#x60;.
         * @param {string} [updated] Filter by an update date, for example: &#x60;2020-12-01,2020-12-31&#x60;.
         * @param {number} [platformsCount] Filter by platforms count, for example: &#x60;1&#x60;.
         * @param {string} [metacritic] Filter by a metacritic rating, for example: &#x60;80,100&#x60;.
         * @param {number} [excludeCollection] Exclude games from a particular collection, for example: &#x60;123&#x60;.
         * @param {boolean} [excludeAdditions] Exclude additions.
         * @param {boolean} [excludeParents] Exclude games which have additions.
         * @param {boolean} [excludeGameSeries] Exclude games which included in a game series.
         * @param {string} [excludeStores] Exclude stores, for example: &#x60;5,6&#x60;.
         * @param {string} [ordering] Available fields: &#x60;name&#x60;, &#x60;released&#x60;, &#x60;added&#x60;, &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;rating&#x60;, &#x60;metacritic&#x60;. You can reverse the sort order adding a hyphen, for example: &#x60;-released&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesList: async (page?: number, pageSize?: number, search?: string, searchPrecise?: boolean, searchExact?: boolean, parentPlatforms?: string, platforms?: string, stores?: string, developers?: string, publishers?: string, genres?: string, tags?: string, creators?: string, dates?: string, updated?: string, platformsCount?: number, metacritic?: string, excludeCollection?: number, excludeAdditions?: boolean, excludeParents?: boolean, excludeGameSeries?: boolean, excludeStores?: string, ordering?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/games`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (searchPrecise !== undefined) {
                localVarQueryParameter['search_precise'] = searchPrecise;
            }

            if (searchExact !== undefined) {
                localVarQueryParameter['search_exact'] = searchExact;
            }

            if (parentPlatforms !== undefined) {
                localVarQueryParameter['parent_platforms'] = parentPlatforms;
            }

            if (platforms !== undefined) {
                localVarQueryParameter['platforms'] = platforms;
            }

            if (stores !== undefined) {
                localVarQueryParameter['stores'] = stores;
            }

            if (developers !== undefined) {
                localVarQueryParameter['developers'] = developers;
            }

            if (publishers !== undefined) {
                localVarQueryParameter['publishers'] = publishers;
            }

            if (genres !== undefined) {
                localVarQueryParameter['genres'] = genres;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (creators !== undefined) {
                localVarQueryParameter['creators'] = creators;
            }

            if (dates !== undefined) {
                localVarQueryParameter['dates'] = dates;
            }

            if (updated !== undefined) {
                localVarQueryParameter['updated'] = updated;
            }

            if (platformsCount !== undefined) {
                localVarQueryParameter['platforms_count'] = platformsCount;
            }

            if (metacritic !== undefined) {
                localVarQueryParameter['metacritic'] = metacritic;
            }

            if (excludeCollection !== undefined) {
                localVarQueryParameter['exclude_collection'] = excludeCollection;
            }

            if (excludeAdditions !== undefined) {
                localVarQueryParameter['exclude_additions'] = excludeAdditions;
            }

            if (excludeParents !== undefined) {
                localVarQueryParameter['exclude_parents'] = excludeParents;
            }

            if (excludeGameSeries !== undefined) {
                localVarQueryParameter['exclude_game_series'] = excludeGameSeries;
            }

            if (excludeStores !== undefined) {
                localVarQueryParameter['exclude_stores'] = excludeStores;
            }

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of game trailers.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesMoviesRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gamesMoviesRead', 'id', id)
            const localVarPath = `/games/{id}/movies`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of parent games for DLC\'s and editions.
         * @param {string} gamePk 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesParentGamesList: async (gamePk: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gamePk' is not null or undefined
            assertParamExists('gamesParentGamesList', 'gamePk', gamePk)
            const localVarPath = `/games/{game_pk}/parent-games`
                .replace(`{${"game_pk"}}`, encodeURIComponent(String(gamePk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get details of the game.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gamesRead', 'id', id)
            const localVarPath = `/games/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of most recent posts from the game\'s subreddit.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesRedditRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gamesRedditRead', 'id', id)
            const localVarPath = `/games/{id}/reddit`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get screenshots for the game.
         * @param {string} gamePk 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesScreenshotsList: async (gamePk: string, ordering?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gamePk' is not null or undefined
            assertParamExists('gamesScreenshotsList', 'gamePk', gamePk)
            const localVarPath = `/games/{game_pk}/screenshots`
                .replace(`{${"game_pk"}}`, encodeURIComponent(String(gamePk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get links to the stores that sell the game.
         * @param {string} gamePk 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesStoresList: async (gamePk: string, ordering?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gamePk' is not null or undefined
            assertParamExists('gamesStoresList', 'gamePk', gamePk)
            const localVarPath = `/games/{game_pk}/stores`
                .replace(`{${"game_pk"}}`, encodeURIComponent(String(gamePk)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of visually similar games, available only for business and enterprise API users.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesSuggestedRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gamesSuggestedRead', 'id', id)
            const localVarPath = `/games/{id}/suggested`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get streams on Twitch associated with the game, available only for business and enterprise API users.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesTwitchRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gamesTwitchRead', 'id', id)
            const localVarPath = `/games/{id}/twitch`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get videos from YouTube associated with the game, available only for business and enterprise API users.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesYoutubeRead: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('gamesYoutubeRead', 'id', id)
            const localVarPath = `/games/{id}/youtube`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GamesApi - functional programming interface
 * @export
 */
export const GamesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GamesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a list of game achievements.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesAchievementsRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParentAchievement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesAchievementsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of DLC\'s for the game, GOTY and other editions, companion apps, etc.
         * @param {string} gamePk 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesAdditionsList(gamePk: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GamesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesAdditionsList(gamePk, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of individual creators that were part of the development team.
         * @param {string} gamePk 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesDevelopmentTeamList(gamePk: string, ordering?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GamesDevelopmentTeamList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesDevelopmentTeamList(gamePk, ordering, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of games that are part of the same series.
         * @param {string} gamePk 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesGameSeriesList(gamePk: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GamesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesGameSeriesList(gamePk, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of games.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] Search query.
         * @param {boolean} [searchPrecise] Disable fuzziness for the search query.
         * @param {boolean} [searchExact] Mark the search query as exact.
         * @param {string} [parentPlatforms] Filter by parent platforms, for example: &#x60;1,2,3&#x60;.
         * @param {string} [platforms] Filter by platforms, for example: &#x60;4,5&#x60;.
         * @param {string} [stores] Filter by stores, for example: &#x60;5,6&#x60;.
         * @param {string} [developers] Filter by developers, for example: &#x60;1612,18893&#x60; or &#x60;valve-software,feral-interactive&#x60;.
         * @param {string} [publishers] Filter by publishers, for example: &#x60;354,20987&#x60; or &#x60;electronic-arts,microsoft-studios&#x60;.
         * @param {string} [genres] Filter by genres, for example: &#x60;4,51&#x60; or &#x60;action,indie&#x60;.
         * @param {string} [tags] Filter by tags, for example: &#x60;31,7&#x60; or &#x60;singleplayer,multiplayer&#x60;.
         * @param {string} [creators] Filter by creators, for example: &#x60;78,28&#x60; or &#x60;cris-velasco,mike-morasky&#x60;.
         * @param {string} [dates] Filter by a release date, for example: &#x60;2010-01-01,2018-12-31.1960-01-01,1969-12-31&#x60;.
         * @param {string} [updated] Filter by an update date, for example: &#x60;2020-12-01,2020-12-31&#x60;.
         * @param {number} [platformsCount] Filter by platforms count, for example: &#x60;1&#x60;.
         * @param {string} [metacritic] Filter by a metacritic rating, for example: &#x60;80,100&#x60;.
         * @param {number} [excludeCollection] Exclude games from a particular collection, for example: &#x60;123&#x60;.
         * @param {boolean} [excludeAdditions] Exclude additions.
         * @param {boolean} [excludeParents] Exclude games which have additions.
         * @param {boolean} [excludeGameSeries] Exclude games which included in a game series.
         * @param {string} [excludeStores] Exclude stores, for example: &#x60;5,6&#x60;.
         * @param {string} [ordering] Available fields: &#x60;name&#x60;, &#x60;released&#x60;, &#x60;added&#x60;, &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;rating&#x60;, &#x60;metacritic&#x60;. You can reverse the sort order adding a hyphen, for example: &#x60;-released&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesList(page?: number, pageSize?: number, search?: string, searchPrecise?: boolean, searchExact?: boolean, parentPlatforms?: string, platforms?: string, stores?: string, developers?: string, publishers?: string, genres?: string, tags?: string, creators?: string, dates?: string, updated?: string, platformsCount?: number, metacritic?: string, excludeCollection?: number, excludeAdditions?: boolean, excludeParents?: boolean, excludeGameSeries?: boolean, excludeStores?: string, ordering?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GamesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesList(page, pageSize, search, searchPrecise, searchExact, parentPlatforms, platforms, stores, developers, publishers, genres, tags, creators, dates, updated, platformsCount, metacritic, excludeCollection, excludeAdditions, excludeParents, excludeGameSeries, excludeStores, ordering, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of game trailers.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesMoviesRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Movie>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesMoviesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of parent games for DLC\'s and editions.
         * @param {string} gamePk 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesParentGamesList(gamePk: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GamesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesParentGamesList(gamePk, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get details of the game.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of most recent posts from the game\'s subreddit.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesRedditRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reddit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesRedditRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get screenshots for the game.
         * @param {string} gamePk 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesScreenshotsList(gamePk: string, ordering?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GamesScreenshotsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesScreenshotsList(gamePk, ordering, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get links to the stores that sell the game.
         * @param {string} gamePk 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesStoresList(gamePk: string, ordering?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GamesStoresList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesStoresList(gamePk, ordering, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of visually similar games, available only for business and enterprise API users.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesSuggestedRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesSuggestedRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get streams on Twitch associated with the game, available only for business and enterprise API users.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesTwitchRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Twitch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesTwitchRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get videos from YouTube associated with the game, available only for business and enterprise API users.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesYoutubeRead(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Youtube>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesYoutubeRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GamesApi - factory interface
 * @export
 */
export const GamesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GamesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a list of game achievements.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesAchievementsRead(id: string, options?: any): AxiosPromise<ParentAchievement> {
            return localVarFp.gamesAchievementsRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of DLC\'s for the game, GOTY and other editions, companion apps, etc.
         * @param {string} gamePk 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesAdditionsList(gamePk: string, page?: number, pageSize?: number, options?: any): AxiosPromise<GamesList200Response> {
            return localVarFp.gamesAdditionsList(gamePk, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of individual creators that were part of the development team.
         * @param {string} gamePk 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesDevelopmentTeamList(gamePk: string, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<GamesDevelopmentTeamList200Response> {
            return localVarFp.gamesDevelopmentTeamList(gamePk, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of games that are part of the same series.
         * @param {string} gamePk 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesGameSeriesList(gamePk: string, page?: number, pageSize?: number, options?: any): AxiosPromise<GamesList200Response> {
            return localVarFp.gamesGameSeriesList(gamePk, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of games.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [search] Search query.
         * @param {boolean} [searchPrecise] Disable fuzziness for the search query.
         * @param {boolean} [searchExact] Mark the search query as exact.
         * @param {string} [parentPlatforms] Filter by parent platforms, for example: &#x60;1,2,3&#x60;.
         * @param {string} [platforms] Filter by platforms, for example: &#x60;4,5&#x60;.
         * @param {string} [stores] Filter by stores, for example: &#x60;5,6&#x60;.
         * @param {string} [developers] Filter by developers, for example: &#x60;1612,18893&#x60; or &#x60;valve-software,feral-interactive&#x60;.
         * @param {string} [publishers] Filter by publishers, for example: &#x60;354,20987&#x60; or &#x60;electronic-arts,microsoft-studios&#x60;.
         * @param {string} [genres] Filter by genres, for example: &#x60;4,51&#x60; or &#x60;action,indie&#x60;.
         * @param {string} [tags] Filter by tags, for example: &#x60;31,7&#x60; or &#x60;singleplayer,multiplayer&#x60;.
         * @param {string} [creators] Filter by creators, for example: &#x60;78,28&#x60; or &#x60;cris-velasco,mike-morasky&#x60;.
         * @param {string} [dates] Filter by a release date, for example: &#x60;2010-01-01,2018-12-31.1960-01-01,1969-12-31&#x60;.
         * @param {string} [updated] Filter by an update date, for example: &#x60;2020-12-01,2020-12-31&#x60;.
         * @param {number} [platformsCount] Filter by platforms count, for example: &#x60;1&#x60;.
         * @param {string} [metacritic] Filter by a metacritic rating, for example: &#x60;80,100&#x60;.
         * @param {number} [excludeCollection] Exclude games from a particular collection, for example: &#x60;123&#x60;.
         * @param {boolean} [excludeAdditions] Exclude additions.
         * @param {boolean} [excludeParents] Exclude games which have additions.
         * @param {boolean} [excludeGameSeries] Exclude games which included in a game series.
         * @param {string} [excludeStores] Exclude stores, for example: &#x60;5,6&#x60;.
         * @param {string} [ordering] Available fields: &#x60;name&#x60;, &#x60;released&#x60;, &#x60;added&#x60;, &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;rating&#x60;, &#x60;metacritic&#x60;. You can reverse the sort order adding a hyphen, for example: &#x60;-released&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesList(page?: number, pageSize?: number, search?: string, searchPrecise?: boolean, searchExact?: boolean, parentPlatforms?: string, platforms?: string, stores?: string, developers?: string, publishers?: string, genres?: string, tags?: string, creators?: string, dates?: string, updated?: string, platformsCount?: number, metacritic?: string, excludeCollection?: number, excludeAdditions?: boolean, excludeParents?: boolean, excludeGameSeries?: boolean, excludeStores?: string, ordering?: string, options?: any): AxiosPromise<GamesList200Response> {
            return localVarFp.gamesList(page, pageSize, search, searchPrecise, searchExact, parentPlatforms, platforms, stores, developers, publishers, genres, tags, creators, dates, updated, platformsCount, metacritic, excludeCollection, excludeAdditions, excludeParents, excludeGameSeries, excludeStores, ordering, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of game trailers.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesMoviesRead(id: string, options?: any): AxiosPromise<Movie> {
            return localVarFp.gamesMoviesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of parent games for DLC\'s and editions.
         * @param {string} gamePk 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesParentGamesList(gamePk: string, page?: number, pageSize?: number, options?: any): AxiosPromise<GamesList200Response> {
            return localVarFp.gamesParentGamesList(gamePk, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get details of the game.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesRead(id: string, options?: any): AxiosPromise<GameSingle> {
            return localVarFp.gamesRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of most recent posts from the game\'s subreddit.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesRedditRead(id: string, options?: any): AxiosPromise<Reddit> {
            return localVarFp.gamesRedditRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get screenshots for the game.
         * @param {string} gamePk 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesScreenshotsList(gamePk: string, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<GamesScreenshotsList200Response> {
            return localVarFp.gamesScreenshotsList(gamePk, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get links to the stores that sell the game.
         * @param {string} gamePk 
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesStoresList(gamePk: string, ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<GamesStoresList200Response> {
            return localVarFp.gamesStoresList(gamePk, ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of visually similar games, available only for business and enterprise API users.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesSuggestedRead(id: string, options?: any): AxiosPromise<GameSingle> {
            return localVarFp.gamesSuggestedRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get streams on Twitch associated with the game, available only for business and enterprise API users.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesTwitchRead(id: string, options?: any): AxiosPromise<Twitch> {
            return localVarFp.gamesTwitchRead(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get videos from YouTube associated with the game, available only for business and enterprise API users.
         * @param {string} id An ID or a slug identifying this Game.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesYoutubeRead(id: string, options?: any): AxiosPromise<Youtube> {
            return localVarFp.gamesYoutubeRead(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GamesApi - object-oriented interface
 * @export
 * @class GamesApi
 * @extends {BaseAPI}
 */
export class GamesApi extends BaseAPI {
    /**
     * 
     * @summary Get a list of game achievements.
     * @param {string} id An ID or a slug identifying this Game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public gamesAchievementsRead(id: string, options?: AxiosRequestConfig) {
        return GamesApiFp(this.configuration).gamesAchievementsRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of DLC\'s for the game, GOTY and other editions, companion apps, etc.
     * @param {string} gamePk 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public gamesAdditionsList(gamePk: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return GamesApiFp(this.configuration).gamesAdditionsList(gamePk, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of individual creators that were part of the development team.
     * @param {string} gamePk 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public gamesDevelopmentTeamList(gamePk: string, ordering?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return GamesApiFp(this.configuration).gamesDevelopmentTeamList(gamePk, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of games that are part of the same series.
     * @param {string} gamePk 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public gamesGameSeriesList(gamePk: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return GamesApiFp(this.configuration).gamesGameSeriesList(gamePk, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of games.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [search] Search query.
     * @param {boolean} [searchPrecise] Disable fuzziness for the search query.
     * @param {boolean} [searchExact] Mark the search query as exact.
     * @param {string} [parentPlatforms] Filter by parent platforms, for example: &#x60;1,2,3&#x60;.
     * @param {string} [platforms] Filter by platforms, for example: &#x60;4,5&#x60;.
     * @param {string} [stores] Filter by stores, for example: &#x60;5,6&#x60;.
     * @param {string} [developers] Filter by developers, for example: &#x60;1612,18893&#x60; or &#x60;valve-software,feral-interactive&#x60;.
     * @param {string} [publishers] Filter by publishers, for example: &#x60;354,20987&#x60; or &#x60;electronic-arts,microsoft-studios&#x60;.
     * @param {string} [genres] Filter by genres, for example: &#x60;4,51&#x60; or &#x60;action,indie&#x60;.
     * @param {string} [tags] Filter by tags, for example: &#x60;31,7&#x60; or &#x60;singleplayer,multiplayer&#x60;.
     * @param {string} [creators] Filter by creators, for example: &#x60;78,28&#x60; or &#x60;cris-velasco,mike-morasky&#x60;.
     * @param {string} [dates] Filter by a release date, for example: &#x60;2010-01-01,2018-12-31.1960-01-01,1969-12-31&#x60;.
     * @param {string} [updated] Filter by an update date, for example: &#x60;2020-12-01,2020-12-31&#x60;.
     * @param {number} [platformsCount] Filter by platforms count, for example: &#x60;1&#x60;.
     * @param {string} [metacritic] Filter by a metacritic rating, for example: &#x60;80,100&#x60;.
     * @param {number} [excludeCollection] Exclude games from a particular collection, for example: &#x60;123&#x60;.
     * @param {boolean} [excludeAdditions] Exclude additions.
     * @param {boolean} [excludeParents] Exclude games which have additions.
     * @param {boolean} [excludeGameSeries] Exclude games which included in a game series.
     * @param {string} [excludeStores] Exclude stores, for example: &#x60;5,6&#x60;.
     * @param {string} [ordering] Available fields: &#x60;name&#x60;, &#x60;released&#x60;, &#x60;added&#x60;, &#x60;created&#x60;, &#x60;updated&#x60;, &#x60;rating&#x60;, &#x60;metacritic&#x60;. You can reverse the sort order adding a hyphen, for example: &#x60;-released&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public gamesList(page?: number, pageSize?: number, search?: string, searchPrecise?: boolean, searchExact?: boolean, parentPlatforms?: string, platforms?: string, stores?: string, developers?: string, publishers?: string, genres?: string, tags?: string, creators?: string, dates?: string, updated?: string, platformsCount?: number, metacritic?: string, excludeCollection?: number, excludeAdditions?: boolean, excludeParents?: boolean, excludeGameSeries?: boolean, excludeStores?: string, ordering?: string, options?: AxiosRequestConfig) {
        return GamesApiFp(this.configuration).gamesList(page, pageSize, search, searchPrecise, searchExact, parentPlatforms, platforms, stores, developers, publishers, genres, tags, creators, dates, updated, platformsCount, metacritic, excludeCollection, excludeAdditions, excludeParents, excludeGameSeries, excludeStores, ordering, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of game trailers.
     * @param {string} id An ID or a slug identifying this Game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public gamesMoviesRead(id: string, options?: AxiosRequestConfig) {
        return GamesApiFp(this.configuration).gamesMoviesRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of parent games for DLC\'s and editions.
     * @param {string} gamePk 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public gamesParentGamesList(gamePk: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return GamesApiFp(this.configuration).gamesParentGamesList(gamePk, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get details of the game.
     * @param {string} id An ID or a slug identifying this Game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public gamesRead(id: string, options?: AxiosRequestConfig) {
        return GamesApiFp(this.configuration).gamesRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of most recent posts from the game\'s subreddit.
     * @param {string} id An ID or a slug identifying this Game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public gamesRedditRead(id: string, options?: AxiosRequestConfig) {
        return GamesApiFp(this.configuration).gamesRedditRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get screenshots for the game.
     * @param {string} gamePk 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public gamesScreenshotsList(gamePk: string, ordering?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return GamesApiFp(this.configuration).gamesScreenshotsList(gamePk, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get links to the stores that sell the game.
     * @param {string} gamePk 
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public gamesStoresList(gamePk: string, ordering?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return GamesApiFp(this.configuration).gamesStoresList(gamePk, ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of visually similar games, available only for business and enterprise API users.
     * @param {string} id An ID or a slug identifying this Game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public gamesSuggestedRead(id: string, options?: AxiosRequestConfig) {
        return GamesApiFp(this.configuration).gamesSuggestedRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get streams on Twitch associated with the game, available only for business and enterprise API users.
     * @param {string} id An ID or a slug identifying this Game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public gamesTwitchRead(id: string, options?: AxiosRequestConfig) {
        return GamesApiFp(this.configuration).gamesTwitchRead(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get videos from YouTube associated with the game, available only for business and enterprise API users.
     * @param {string} id An ID or a slug identifying this Game.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public gamesYoutubeRead(id: string, options?: AxiosRequestConfig) {
        return GamesApiFp(this.configuration).gamesYoutubeRead(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GenresApi - axios parameter creator
 * @export
 */
export const GenresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a list of video game genres.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genresList: async (ordering?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/genres`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get details of the genre.
         * @param {number} id A unique integer value identifying this Genre.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genresRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('genresRead', 'id', id)
            const localVarPath = `/genres/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GenresApi - functional programming interface
 * @export
 */
export const GenresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GenresApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a list of video game genres.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async genresList(ordering?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenresList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genresList(ordering, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get details of the genre.
         * @param {number} id A unique integer value identifying this Genre.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async genresRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenreSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.genresRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GenresApi - factory interface
 * @export
 */
export const GenresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GenresApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a list of video game genres.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genresList(ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<GenresList200Response> {
            return localVarFp.genresList(ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get details of the genre.
         * @param {number} id A unique integer value identifying this Genre.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        genresRead(id: number, options?: any): AxiosPromise<GenreSingle> {
            return localVarFp.genresRead(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GenresApi - object-oriented interface
 * @export
 * @class GenresApi
 * @extends {BaseAPI}
 */
export class GenresApi extends BaseAPI {
    /**
     * 
     * @summary Get a list of video game genres.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenresApi
     */
    public genresList(ordering?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return GenresApiFp(this.configuration).genresList(ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get details of the genre.
     * @param {number} id A unique integer value identifying this Genre.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenresApi
     */
    public genresRead(id: number, options?: AxiosRequestConfig) {
        return GenresApiFp(this.configuration).genresRead(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PlatformsApi - axios parameter creator
 * @export
 */
export const PlatformsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a list of video game platforms.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsList: async (ordering?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/platforms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * For instance, for PS2 and PS4 the “parent platform” is PlayStation.
         * @summary Get a list of parent platforms.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsListsParentsList: async (ordering?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/platforms/lists/parents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get details of the platform.
         * @param {number} id A unique integer value identifying this Platform.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('platformsRead', 'id', id)
            const localVarPath = `/platforms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlatformsApi - functional programming interface
 * @export
 */
export const PlatformsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlatformsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a list of video game platforms.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async platformsList(ordering?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlatformsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.platformsList(ordering, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * For instance, for PS2 and PS4 the “parent platform” is PlayStation.
         * @summary Get a list of parent platforms.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async platformsListsParentsList(ordering?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlatformsListsParentsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.platformsListsParentsList(ordering, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get details of the platform.
         * @param {number} id A unique integer value identifying this Platform.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async platformsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlatformSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.platformsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PlatformsApi - factory interface
 * @export
 */
export const PlatformsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlatformsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a list of video game platforms.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsList(ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PlatformsList200Response> {
            return localVarFp.platformsList(ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * For instance, for PS2 and PS4 the “parent platform” is PlayStation.
         * @summary Get a list of parent platforms.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsListsParentsList(ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<PlatformsListsParentsList200Response> {
            return localVarFp.platformsListsParentsList(ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get details of the platform.
         * @param {number} id A unique integer value identifying this Platform.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        platformsRead(id: number, options?: any): AxiosPromise<PlatformSingle> {
            return localVarFp.platformsRead(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlatformsApi - object-oriented interface
 * @export
 * @class PlatformsApi
 * @extends {BaseAPI}
 */
export class PlatformsApi extends BaseAPI {
    /**
     * 
     * @summary Get a list of video game platforms.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    public platformsList(ordering?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return PlatformsApiFp(this.configuration).platformsList(ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * For instance, for PS2 and PS4 the “parent platform” is PlayStation.
     * @summary Get a list of parent platforms.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    public platformsListsParentsList(ordering?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return PlatformsApiFp(this.configuration).platformsListsParentsList(ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get details of the platform.
     * @param {number} id A unique integer value identifying this Platform.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformsApi
     */
    public platformsRead(id: number, options?: AxiosRequestConfig) {
        return PlatformsApiFp(this.configuration).platformsRead(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PublishersApi - axios parameter creator
 * @export
 */
export const PublishersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a list of video game publishers.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishersList: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/publishers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get details of the publisher.
         * @param {number} id A unique integer value identifying this Publisher.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishersRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('publishersRead', 'id', id)
            const localVarPath = `/publishers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublishersApi - functional programming interface
 * @export
 */
export const PublishersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublishersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a list of video game publishers.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishersList(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublishersList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishersList(page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get details of the publisher.
         * @param {number} id A unique integer value identifying this Publisher.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishersRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublisherSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishersRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublishersApi - factory interface
 * @export
 */
export const PublishersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublishersApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a list of video game publishers.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishersList(page?: number, pageSize?: number, options?: any): AxiosPromise<PublishersList200Response> {
            return localVarFp.publishersList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get details of the publisher.
         * @param {number} id A unique integer value identifying this Publisher.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishersRead(id: number, options?: any): AxiosPromise<PublisherSingle> {
            return localVarFp.publishersRead(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublishersApi - object-oriented interface
 * @export
 * @class PublishersApi
 * @extends {BaseAPI}
 */
export class PublishersApi extends BaseAPI {
    /**
     * 
     * @summary Get a list of video game publishers.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublishersApi
     */
    public publishersList(page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return PublishersApiFp(this.configuration).publishersList(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get details of the publisher.
     * @param {number} id A unique integer value identifying this Publisher.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublishersApi
     */
    public publishersRead(id: number, options?: AxiosRequestConfig) {
        return PublishersApiFp(this.configuration).publishersRead(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StoresApi - axios parameter creator
 * @export
 */
export const StoresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a list of video game storefronts.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storesList: async (ordering?: string, page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/stores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ordering !== undefined) {
                localVarQueryParameter['ordering'] = ordering;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get details of the store.
         * @param {number} id A unique integer value identifying this Store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storesRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storesRead', 'id', id)
            const localVarPath = `/stores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoresApi - functional programming interface
 * @export
 */
export const StoresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StoresApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a list of video game storefronts.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storesList(ordering?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoresList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storesList(ordering, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get details of the store.
         * @param {number} id A unique integer value identifying this Store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storesRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoreSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storesRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StoresApi - factory interface
 * @export
 */
export const StoresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StoresApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a list of video game storefronts.
         * @param {string} [ordering] Which field to use when ordering the results.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storesList(ordering?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<StoresList200Response> {
            return localVarFp.storesList(ordering, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get details of the store.
         * @param {number} id A unique integer value identifying this Store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storesRead(id: number, options?: any): AxiosPromise<StoreSingle> {
            return localVarFp.storesRead(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StoresApi - object-oriented interface
 * @export
 * @class StoresApi
 * @extends {BaseAPI}
 */
export class StoresApi extends BaseAPI {
    /**
     * 
     * @summary Get a list of video game storefronts.
     * @param {string} [ordering] Which field to use when ordering the results.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoresApi
     */
    public storesList(ordering?: string, page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return StoresApiFp(this.configuration).storesList(ordering, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get details of the store.
     * @param {number} id A unique integer value identifying this Store.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoresApi
     */
    public storesRead(id: number, options?: AxiosRequestConfig) {
        return StoresApiFp(this.configuration).storesRead(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TagsApi - axios parameter creator
 * @export
 */
export const TagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a list of tags.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsList: async (page?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get details of the tag.
         * @param {number} id A unique integer value identifying this Tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsRead: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tagsRead', 'id', id)
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a list of tags.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagsList(page?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagsList(page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get details of the tag.
         * @param {number} id A unique integer value identifying this Tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagsRead(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagsRead(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a list of tags.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsList(page?: number, pageSize?: number, options?: any): AxiosPromise<TagsList200Response> {
            return localVarFp.tagsList(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get details of the tag.
         * @param {number} id A unique integer value identifying this Tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsRead(id: number, options?: any): AxiosPromise<TagSingle> {
            return localVarFp.tagsRead(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export class TagsApi extends BaseAPI {
    /**
     * 
     * @summary Get a list of tags.
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public tagsList(page?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).tagsList(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get details of the tag.
     * @param {number} id A unique integer value identifying this Tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public tagsRead(id: number, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).tagsRead(id, options).then((request) => request(this.axios, this.basePath));
    }
}


